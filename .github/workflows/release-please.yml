name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para obtener tags también

      - name: Run release-please
        id: release
        run: |
          # Instalar release-please CLI
          npm install -g release-please

          # Ejecutar release-please
          if release-please release-pr \
            --repo-url=${{ github.repository }} \
            --config-file=release-please-config.json \
            --manifest-file=.release-please-manifest.json \
            --token=${{ secrets.GITHUB_TOKEN }}; then
            echo "release_created=true" >> $GITHUB_OUTPUT
            # Obtener el tag del release creado
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
            echo "tag_name=" >> $GITHUB_OUTPUT
          fi

  # Job opcional para publicar a PyPI cuando se crea un release
  publish-python:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}

      - name: Set up Python
        run: |
          python3 --version
          python3 -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check PyPI token availability
        id: check_token
        run: |
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ] || [ "${{ secrets.PYPI_API_TOKEN }}" == "" ]; then
            echo "token_available=false" >> $GITHUB_OUTPUT
            echo "⚠️  PYPI_API_TOKEN no configurado o vacío"
          else
            echo "token_available=true" >> $GITHUB_OUTPUT
            echo "✅ PYPI_API_TOKEN configurado correctamente"
          fi

      - name: Publish to PyPI (opcional)
        if: steps.check_token.outputs.token_available == 'true'
        continue-on-error: true
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "🚀 Intentando publicar a PyPI..."
          if twine upload dist/*; then
            echo "✅ Publicación a PyPI exitosa"
          else
            echo "⚠️  Error en la publicación a PyPI"
            echo ""
            echo "📋 Posibles causas y soluciones:"
            echo "1. PYPI_API_TOKEN no configurado en GitHub Settings"
            echo "2. Token de PyPI inválido o expirado"
            echo "3. Permisos insuficientes en PyPI"
            echo ""
            echo "🔧 Para configurar PYPI_API_TOKEN:"
            echo "   Settings > Secrets and variables > Actions > New repository secret"
            echo "   Nombre: PYPI_API_TOKEN"
            echo "   Valor: Tu token de PyPI (https://pypi.org/manage/account/token/)"
            exit 1
          fi

      - name: Skip PyPI publish
        if: steps.check_token.outputs.token_available == 'false'
        run: |
          echo "⚠️  Publicación a PyPI omitida - PYPI_API_TOKEN no configurado"
          echo ""
          echo "📋 Para habilitar la publicación automática a PyPI:"
          echo "1. Ve a Settings > Secrets and variables > Actions"
          echo "2. Haz clic en 'New repository secret'"
          echo "3. Nombre: PYPI_API_TOKEN"
          echo "4. Valor: Tu token de PyPI (obtenlo de https://pypi.org/manage/account/token/)"
          echo ""
          echo "🔄 El próximo release se publicará automáticamente"

  # Job opcional para publicar la web app cuando se crea un release
  publish-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}

      - name: Set up Node.js
        run: |
          # Instalar Node.js usando el sistema
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build web app
        working-directory: apps/web
        run: npm run build

      - name: Deploy to GitHub Pages (opcional)
        if: contains(github.event.head_commit.modified, 'apps/web')
        run: |
          # Desplegar a GitHub Pages manualmente
          echo "🚀 Desplegando a GitHub Pages..."
          # Configurar git para GitHub Pages
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Crear rama gh-pages si no existe
          git checkout --orphan gh-pages
          git rm -rf .
          cp -r apps/web/out/* .
          git add .
          git commit -m "Deploy to GitHub Pages"
          git push origin gh-pages --force
