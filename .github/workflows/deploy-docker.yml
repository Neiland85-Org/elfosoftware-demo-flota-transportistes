name: Deploy to Docker

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/flota-backend
  FRONTEND_IMAGE: ${{ github.repository }}/flota-frontend
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        file: ./apps/backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment package
      run: |
        mkdir -p deployment
        cp docker-compose.prod.yml deployment/
        cp .env.example deployment/.env.template
        echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest" >> deployment/.env.template
        echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest" >> deployment/.env.template

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ env.ENVIRONMENT }}
        path: deployment/

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-${{ env.ENVIRONMENT }}

    - name: Deploy to server
      run: |
        echo "Deployment instructions:"
        echo "1. Copy the deployment/ folder to your server"
        echo "2. Configure your .env file based on .env.template"
        echo "3. Run: docker-compose -f docker-compose.prod.yml up -d"
        echo ""
        echo "For automated deployment, you can:"
        echo "- Use Docker Swarm or Kubernetes"
        echo "- Set up a deployment server with SSH access"
        echo "- Use services like Railway, Render, or DigitalOcean App Platform"

    - name: Create deployment summary
      run: |
        echo "## 🐳 Docker Deployment Ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images Built:" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the deployment artifact from this workflow" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure your .env file with production values" >> $GITHUB_STEP_SUMMARY
        echo "3. Run: \`docker-compose -f docker-compose.prod.yml up -d\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Set up a deployment server (VPS, cloud instance)" >> $GITHUB_STEP_SUMMARY
        echo "- Configure reverse proxy (nginx, traefik)" >> $GITHUB_STEP_SUMMARY
        echo "- Set up SSL certificates" >> $GITHUB_STEP_SUMMARY
        echo "- Configure monitoring and logging" >> $GITHUB_STEP_SUMMARY
